set nocompatible              " be iMproved, required
filetype off                  " required
let g:mapleader=','


set number relativenumber
set autoread


" vim-numbertoggle - Automatic toggling between 'hybrid' and absolute line numbers
" Maintainer:        <https://jeffkreeftmeijer.com>
" Version:           2.1.1

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu | set rnu   | endif
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu | set nornu | endif
augroup END

packadd! matchit

" Vundle (plugin manager)
"===============================================================================

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Directory and file navigation plugin
" Plugin 'scrooloose/nerdtree'

" git plugin
Plugin 'tpope/vim-fugitive'
" rails.vim: Ruby on Rails power tools
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-surround'

" insert or delete brackets, parens, quotes in pair
Plugin 'jiangmiao/auto-pairs'

" Fuzzy file, buffer, mru, tag, etc. finder
Plugin 'ctrlpvim/ctrlp.vim'

" Provides linting (syntax checking and semantic errors) while you edit your
" text files, and acts as a Vim Language Server Protocol client
Plugin 'dense-analysis/ale'

" Edit large files quickly
Plugin 'vim-scripts/LargeFile'

" Search in files 
Plugin 'mileszs/ack.vim'

" Support for expanding abbreviations for html & css
Plugin 'mattn/emmet-vim'

" A simple, easy-to-use Vim alignment plugin
Plugin 'junegunn/vim-easy-align'

" Color theme
Plugin 'NLKNguyen/papercolor-theme'

" Tagbar is a Vim plugin that provides an easy way to browse the tags of the
" current file and get an overview of its structure.
Plugin 'preservim/tagbar'

" A Vim plugin that manages your tag files (using ctags)
Plugin 'ludovicchabant/vim-gutentags.git'

" Personal Wiki for Vim 
Plugin 'vimwiki/vimwiki.git'

" automatically synchronize Vimwiki notes directory on Vimwiki startup and exit
" using Git
Plugin 'michal-h21/vimwiki-sync.git'

" color name highlighter
Plugin 'ap/vim-css-color'

" Multiple cursors plugin for vim/neovim
Plugin 'mg979/vim-visual-multi'

Plugin 'prabirshrestha/vim-lsp'
Plugin 'mattn/vim-lsp-settings'

" Plugin 'tpope/vim-bundler'

" **All of your Plugins must be added before the following line**

call vundle#end()            " required
filetype plugin indent on    " required
"===============================================================================


" Shortcuts
"===============================================================================
" Delete the buffer but keep the split (take the previous opened buffer)
nmap <Leader>d :b#<bar>bd#<CR>

" List all open buffers
nmap <Leader>b :CtrlPBuffer<CR>

" Remove matched highlights
nmap <Leader><Space> :nohl<CR>

" Show list of tags for the current open file
nmap <F8> :TagbarToggle<CR>
"
" Open file explorer
" - in current buffer
nmap <Leader>e :Explore<CR>
" - vertical split ( | char )
nmap <bar> :Vexplore<CR>
" - horizontal split ( - char )
nmap - :Sexplore<CR>

" Fix issues within current buffer, e.g. trim white spaces
noremap <F3> :ALEFix<CR>

" Search in files
nnoremap <Leader>f :Ack!<Space>

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <S-CR> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
"===============================================================================


" ALE
"===============================================================================

" dependencies:
" rubocop (rvm @global do gem install rubocop)
" prettier (npm --global install prettier)
" tidy (apt install tidy)
" shfmt (go get -u mvdan.cc/sh/cmd/shfmt)

" All shortcuts are defined in same place (this commented one is just for the
" reference for this plugin)
" noremap <F3> :ALEFix<CR>

let g:ale_set_balloons = 0
let g:ale_completion_enabled = 0


let g:ale_fixers = {
\ '*':    ["trim_whitespace"],
\ 'html': ['tidy'],
\ 'xml':  ['xmllint'],
\ 'css':  ['prettier'],
\ 'scss': ['prettier'],
\ 'less': ['prettier'],
\}
let g:ale_linters = {
\ 'html':       ['tidy','prettier'],
\ 'xml':        ['xmllint'],
\ 'javascript': ['prettier'],
\ 'json':       ['prettier'],
\ 'less':       ['prettier'],
\ 'scss':       ['prettier'],
\ 'ruby':       ['rubocop'],
\ 'yaml':       ['prettier'],
\ 'bash':       ['shellcheck']
\}
"===============================================================================


" set cursorline                  " highlight current line
set mouse=a                       " mouse functionality enabled
set ttymouse=urxvt                " mouse support in vim
set showmatch                     " highlight matching [{()}]
set foldmethod=syntax

syntax enable

" General
set number                        " Show line numbers
set showmatch                     " Highlight matching brace
set visualbell                    " Use visual bell (no beeping)

set hlsearch                      " Highlight all search results
set smartcase                     " Enable smart-case search
set ignorecase                    " Always case-insensitive
set incsearch                     " Searches for strings incrementally

set autoindent                    " Auto-indent new lines
set expandtab                     " Use spaces instead of tabs
set shiftwidth=2                  " Number of auto-indent spaces
set smartindent                   " Enable smart-indent
set smarttab                      " Enable smart-tabs
set softtabstop=2                 " Number of spaces per Tab
set tabstop=2   
set directory=$HOME/.vim/swp//    " Place where vim will keep its swap files

set clipboard=unnamed,unnamedplus " use the system clipboard

" background to dark to keep same color schema when using vim in tmux
set t_Co=256    " make sure that terminal has 256 colors enabled
set background=dark

colorscheme PaperColor   " set colorscheme

set colorcolumn=80

" Advanced
set confirm                    " Prompt confirmation dialogs
set ruler                      " Show row and column ruler information

set backspace=indent,eol,start " Backspace behaviour

set laststatus=2               " show status bar all the time
set nowrap                     " do not wrap long lines"

let NERDTreeShowHidden=1    " show hidden files in NERDTree

" override gui background color from colorscheme (set it to black)
highlight Normal   ctermbg=0 guibg=#000000 " set it to black

highlight Pmenu    ctermfg=0 ctermbg=15
highlight PmenuSel ctermfg=0 ctermbg=7


" Ack settings
"===============================================================================

" All shortcuts are defined in same place (this commented one is just for the
" reference for this plugin)
" nnoremap <Leader>f :Ack!<Space>

" Use ripgrep (in case it's there) for text search 
if executable('rg')
  let g:ackprg = 'rg --smart-case --sort path --vimgrep'
endif
"===============================================================================


" Status line definition
"===============================================================================
set statusline=%f                                           " filename
set statusline+=\ %h%m%r                                    " help buffer tag, modified tag, read only tag
set statusline+=%=                                          " separator left-right side of status line
set statusline+=%{gutentags#statusline()}                   " know when gutentags is generating tags
set statusline+=\ %l/%L:%c                                  " line-number/total-number-of-lines:column-number
set statusline+=\ [0x%B]                                    " unicode value of the characted under the cursor
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}  " file encoding
set statusline+=\ [%{&ff}]                                  " file format
"===============================================================================

" Modification of complete functionality (so it looks more like the autocomplete from IDEs)
set completeopt=longest,menuone

let g:buftabline_numbers = 1 " show buffer numbers in tab line

" search for tags file up to home directory
set tags+=tags;$HOME

" GVim settings
"===============================================================================
set guioptions-=m "remove menu bar
set guioptions-=T "remove toolbar
set guioptions-=r "remove right-hand scroll bar 
set guioptions-=L "remove left-hand scroll bar 
"===============================================================================

" let g:AutoPairsFlyMode = 1

hi TabLineSel   guibg=DarkGreen guifg=White
hi TabLine      guibg=Black     guifg=Gray
hi StatusLine   guibg=Black     guifg=Green
hi StatusLineNC guibg=DarkRed   guifg=DarkGray

set guifont=DejaVu\ Sans\ Mono\ 9
au BufNewFile,BufRead Jenkinsfile* setf groovy
au BufNewFile,BufRead *.service    setf systemd
au BufNewFile,BufRead *.unit       setf systemd
au BufNewFile,BufRead *.timer      setf systemd


" Visual-Multi
"===============================================================================
let g:VM_maps                       = {}
let g:VM_maps['Find Under']         = '<C-A-n>'           " replace C-n
let g:VM_maps['Find Subword Under'] = '<C-A-n>'           " replace visual C-n
"===============================================================================


" Vimwiki 
"===============================================================================
let wiki_1                  = {}
let wiki_1.name             = 'Wiki'
let wiki_1.path             = '~/projects/wiki/'
let wiki_1.syntax           = 'markdown'
let wiki_1.ext              = '.md'
let wiki_1.links_space_char = '-'
let wiki_1.index            = 'index'

let wiki_2                  = {}
let wiki_2.name             = 'Private'
let wiki_2.path             = '~/projects/wiki/private'
let wiki_2.syntax           = 'markdown'
let wiki_2.ext              = '.md'
let wiki_2.links_space_char = '-'
let wiki_2.index            = 'index'

let wiki_3                  = {}
let wiki_3.name             = 'Tasks'
let wiki_3.path             = '~/projects/wiki/tasks'
let wiki_3.syntax           = 'markdown'
let wiki_3.ext              = '.md'
let wiki_3.links_space_char = '-'
let wiki_3.index            = 'index'

let g:vimwiki_list          = [wiki_1, wiki_2, wiki_3]
"===============================================================================


" Gutentags
"===============================================================================
let g:gutentags_project_root = ['.git']
"===============================================================================
